# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import recommendations_pb2 as recommendations__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recommendations_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CatalogStub(object):
    """Catalog service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMovie = channel.unary_unary(
                '/recommendations.Catalog/CreateMovie',
                request_serializer=recommendations__pb2.CreateMovieRequest.SerializeToString,
                response_deserializer=recommendations__pb2.Movie.FromString,
                _registered_method=True)
        self.GetMovie = channel.unary_unary(
                '/recommendations.Catalog/GetMovie',
                request_serializer=recommendations__pb2.GetMovieRequest.SerializeToString,
                response_deserializer=recommendations__pb2.Movie.FromString,
                _registered_method=True)
        self.UpdateMovie = channel.unary_unary(
                '/recommendations.Catalog/UpdateMovie',
                request_serializer=recommendations__pb2.UpdateMovieRequest.SerializeToString,
                response_deserializer=recommendations__pb2.Movie.FromString,
                _registered_method=True)
        self.DeleteMovie = channel.unary_unary(
                '/recommendations.Catalog/DeleteMovie',
                request_serializer=recommendations__pb2.DeleteMovieRequest.SerializeToString,
                response_deserializer=recommendations__pb2.DeleteMovieResponse.FromString,
                _registered_method=True)
        self.ListMovies = channel.unary_unary(
                '/recommendations.Catalog/ListMovies',
                request_serializer=recommendations__pb2.ListMoviesRequest.SerializeToString,
                response_deserializer=recommendations__pb2.ListMoviesResponse.FromString,
                _registered_method=True)


class CatalogServicer(object):
    """Catalog service definition
    """

    def CreateMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CatalogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMovie,
                    request_deserializer=recommendations__pb2.CreateMovieRequest.FromString,
                    response_serializer=recommendations__pb2.Movie.SerializeToString,
            ),
            'GetMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovie,
                    request_deserializer=recommendations__pb2.GetMovieRequest.FromString,
                    response_serializer=recommendations__pb2.Movie.SerializeToString,
            ),
            'UpdateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMovie,
                    request_deserializer=recommendations__pb2.UpdateMovieRequest.FromString,
                    response_serializer=recommendations__pb2.Movie.SerializeToString,
            ),
            'DeleteMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMovie,
                    request_deserializer=recommendations__pb2.DeleteMovieRequest.FromString,
                    response_serializer=recommendations__pb2.DeleteMovieResponse.SerializeToString,
            ),
            'ListMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMovies,
                    request_deserializer=recommendations__pb2.ListMoviesRequest.FromString,
                    response_serializer=recommendations__pb2.ListMoviesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'recommendations.Catalog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('recommendations.Catalog', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Catalog(object):
    """Catalog service definition
    """

    @staticmethod
    def CreateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Catalog/CreateMovie',
            recommendations__pb2.CreateMovieRequest.SerializeToString,
            recommendations__pb2.Movie.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Catalog/GetMovie',
            recommendations__pb2.GetMovieRequest.SerializeToString,
            recommendations__pb2.Movie.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Catalog/UpdateMovie',
            recommendations__pb2.UpdateMovieRequest.SerializeToString,
            recommendations__pb2.Movie.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Catalog/DeleteMovie',
            recommendations__pb2.DeleteMovieRequest.SerializeToString,
            recommendations__pb2.DeleteMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Catalog/ListMovies',
            recommendations__pb2.ListMoviesRequest.SerializeToString,
            recommendations__pb2.ListMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RecommendationsStub(object):
    """Update the Recommendations service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecommendations = channel.unary_unary(
                '/recommendations.Recommendations/GetRecommendations',
                request_serializer=recommendations__pb2.RecommendationsRequest.SerializeToString,
                response_deserializer=recommendations__pb2.RecommendationsResponse.FromString,
                _registered_method=True)
        self.CreatePreference = channel.unary_unary(
                '/recommendations.Recommendations/CreatePreference',
                request_serializer=recommendations__pb2.CreatePreferenceRequest.SerializeToString,
                response_deserializer=recommendations__pb2.Preference.FromString,
                _registered_method=True)
        self.GetPreferences = channel.unary_unary(
                '/recommendations.Recommendations/GetPreferences',
                request_serializer=recommendations__pb2.GetPreferencesRequest.SerializeToString,
                response_deserializer=recommendations__pb2.GetPreferencesResponse.FromString,
                _registered_method=True)
        self.DeletePreference = channel.unary_unary(
                '/recommendations.Recommendations/DeletePreference',
                request_serializer=recommendations__pb2.DeletePreferenceRequest.SerializeToString,
                response_deserializer=recommendations__pb2.DeletePreferenceResponse.FromString,
                _registered_method=True)
        self.ProcessFilmUpdate = channel.unary_unary(
                '/recommendations.Recommendations/ProcessFilmUpdate',
                request_serializer=recommendations__pb2.FilmUpdate.SerializeToString,
                response_deserializer=recommendations__pb2.FilmUpdateResponse.FromString,
                _registered_method=True)


class RecommendationsServicer(object):
    """Update the Recommendations service
    """

    def GetRecommendations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePreference(self, request, context):
        """New RPCs for preferences
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPreferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePreference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessFilmUpdate(self, request, context):
        """New RPC for film updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecommendationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecommendations,
                    request_deserializer=recommendations__pb2.RecommendationsRequest.FromString,
                    response_serializer=recommendations__pb2.RecommendationsResponse.SerializeToString,
            ),
            'CreatePreference': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePreference,
                    request_deserializer=recommendations__pb2.CreatePreferenceRequest.FromString,
                    response_serializer=recommendations__pb2.Preference.SerializeToString,
            ),
            'GetPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPreferences,
                    request_deserializer=recommendations__pb2.GetPreferencesRequest.FromString,
                    response_serializer=recommendations__pb2.GetPreferencesResponse.SerializeToString,
            ),
            'DeletePreference': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePreference,
                    request_deserializer=recommendations__pb2.DeletePreferenceRequest.FromString,
                    response_serializer=recommendations__pb2.DeletePreferenceResponse.SerializeToString,
            ),
            'ProcessFilmUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessFilmUpdate,
                    request_deserializer=recommendations__pb2.FilmUpdate.FromString,
                    response_serializer=recommendations__pb2.FilmUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'recommendations.Recommendations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('recommendations.Recommendations', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Recommendations(object):
    """Update the Recommendations service
    """

    @staticmethod
    def GetRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Recommendations/GetRecommendations',
            recommendations__pb2.RecommendationsRequest.SerializeToString,
            recommendations__pb2.RecommendationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePreference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Recommendations/CreatePreference',
            recommendations__pb2.CreatePreferenceRequest.SerializeToString,
            recommendations__pb2.Preference.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Recommendations/GetPreferences',
            recommendations__pb2.GetPreferencesRequest.SerializeToString,
            recommendations__pb2.GetPreferencesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePreference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Recommendations/DeletePreference',
            recommendations__pb2.DeletePreferenceRequest.SerializeToString,
            recommendations__pb2.DeletePreferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessFilmUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendations.Recommendations/ProcessFilmUpdate',
            recommendations__pb2.FilmUpdate.SerializeToString,
            recommendations__pb2.FilmUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
